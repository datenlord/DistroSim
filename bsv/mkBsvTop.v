//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// On Wed Nov  8 22:40:10 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// xdmaChannel_rawH2cAxiStream_tready  O     1
// xdmaChannel_rawC2hAxiStream_tvalid  O     1
// xdmaChannel_rawC2hAxiStream_tdata  O   256 reg
// xdmaChannel_rawC2hAxiStream_tkeep  O    32 reg
// xdmaChannel_rawC2hAxiStream_tlast  O     1 reg
// xdmaChannel_h2cDescByp_load    O     1
// xdmaChannel_h2cDescByp_src_addr  O    64 reg
// xdmaChannel_h2cDescByp_dst_addr  O    64 const
// xdmaChannel_h2cDescByp_len     O    28
// xdmaChannel_h2cDescByp_ctl     O     5 const
// xdmaChannel_c2hDescByp_load    O     1
// xdmaChannel_c2hDescByp_src_addr  O    64 const
// xdmaChannel_c2hDescByp_dst_addr  O    64 reg
// xdmaChannel_c2hDescByp_len     O    28
// xdmaChannel_c2hDescByp_ctl     O     5 const
// axilRegBlock_awready           O     1
// axilRegBlock_wready            O     1
// axilRegBlock_bvalid            O     1
// axilRegBlock_bresp             O     2 reg
// axilRegBlock_arready           O     1
// axilRegBlock_rvalid            O     1
// axilRegBlock_rresp             O     2 reg
// axilRegBlock_rdata             O    32 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// xdmaChannel_rawH2cAxiStream_tvalid  I     1
// xdmaChannel_rawH2cAxiStream_tdata  I   256 reg
// xdmaChannel_rawH2cAxiStream_tkeep  I    32 reg
// xdmaChannel_rawH2cAxiStream_tlast  I     1 reg
// xdmaChannel_rawC2hAxiStream_tready  I     1
// xdmaChannel_h2cDescByp_ready   I     1
// xdmaChannel_h2cDescByp_desc_done  I     1 unused
// xdmaChannel_c2hDescByp_ready   I     1
// xdmaChannel_c2hDescByp_desc_done  I     1 unused
// axilRegBlock_awvalid           I     1
// axilRegBlock_awaddr            I    12 reg
// axilRegBlock_awprot            I     3 reg
// axilRegBlock_wvalid            I     1
// axilRegBlock_wdata             I    32 reg
// axilRegBlock_wstrb             I     4 reg
// axilRegBlock_bready            I     1
// axilRegBlock_arvalid           I     1
// axilRegBlock_araddr            I    12 reg
// axilRegBlock_arprot            I     3 reg
// axilRegBlock_rready            I     1
//
// Combinational paths from inputs to outputs:
//   xdmaChannel_h2cDescByp_ready -> xdmaChannel_h2cDescByp_load
//   xdmaChannel_h2cDescByp_ready -> xdmaChannel_h2cDescByp_src_addr
//   xdmaChannel_h2cDescByp_ready -> xdmaChannel_h2cDescByp_len
//   xdmaChannel_c2hDescByp_ready -> xdmaChannel_c2hDescByp_load
//   xdmaChannel_c2hDescByp_ready -> xdmaChannel_c2hDescByp_dst_addr
//   xdmaChannel_c2hDescByp_ready -> xdmaChannel_c2hDescByp_len
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBsvTop(CLK,
		RST_N,

		xdmaChannel_rawH2cAxiStream_tvalid,
		xdmaChannel_rawH2cAxiStream_tdata,
		xdmaChannel_rawH2cAxiStream_tkeep,
		xdmaChannel_rawH2cAxiStream_tlast,

		xdmaChannel_rawH2cAxiStream_tready,

		xdmaChannel_rawC2hAxiStream_tvalid,

		xdmaChannel_rawC2hAxiStream_tdata,

		xdmaChannel_rawC2hAxiStream_tkeep,

		xdmaChannel_rawC2hAxiStream_tlast,

		xdmaChannel_rawC2hAxiStream_tready,

		xdmaChannel_h2cDescByp_ready,

		xdmaChannel_h2cDescByp_load,

		xdmaChannel_h2cDescByp_src_addr,

		xdmaChannel_h2cDescByp_dst_addr,

		xdmaChannel_h2cDescByp_len,

		xdmaChannel_h2cDescByp_ctl,

		xdmaChannel_h2cDescByp_desc_done,

		xdmaChannel_c2hDescByp_ready,

		xdmaChannel_c2hDescByp_load,

		xdmaChannel_c2hDescByp_src_addr,

		xdmaChannel_c2hDescByp_dst_addr,

		xdmaChannel_c2hDescByp_len,

		xdmaChannel_c2hDescByp_ctl,

		xdmaChannel_c2hDescByp_desc_done,

		axilRegBlock_awvalid,
		axilRegBlock_awaddr,
		axilRegBlock_awprot,

		axilRegBlock_awready,

		axilRegBlock_wvalid,
		axilRegBlock_wdata,
		axilRegBlock_wstrb,

		axilRegBlock_wready,

		axilRegBlock_bvalid,

		axilRegBlock_bresp,

		axilRegBlock_bready,

		axilRegBlock_arvalid,
		axilRegBlock_araddr,
		axilRegBlock_arprot,

		axilRegBlock_arready,

		axilRegBlock_rvalid,

		axilRegBlock_rresp,

		axilRegBlock_rdata,

		axilRegBlock_rready);
  input  CLK;
  input  RST_N;

  // action method xdmaChannel_rawH2cAxiStream_tValid
  input  xdmaChannel_rawH2cAxiStream_tvalid;
  input  [255 : 0] xdmaChannel_rawH2cAxiStream_tdata;
  input  [31 : 0] xdmaChannel_rawH2cAxiStream_tkeep;
  input  xdmaChannel_rawH2cAxiStream_tlast;

  // value method xdmaChannel_rawH2cAxiStream_tReady
  output xdmaChannel_rawH2cAxiStream_tready;

  // value method xdmaChannel_rawC2hAxiStream_tValid
  output xdmaChannel_rawC2hAxiStream_tvalid;

  // value method xdmaChannel_rawC2hAxiStream_tData
  output [255 : 0] xdmaChannel_rawC2hAxiStream_tdata;

  // value method xdmaChannel_rawC2hAxiStream_tKeep
  output [31 : 0] xdmaChannel_rawC2hAxiStream_tkeep;

  // value method xdmaChannel_rawC2hAxiStream_tLast
  output xdmaChannel_rawC2hAxiStream_tlast;

  // value method xdmaChannel_rawC2hAxiStream_tUser

  // action method xdmaChannel_rawC2hAxiStream_tReady
  input  xdmaChannel_rawC2hAxiStream_tready;

  // action method xdmaChannel_h2cDescByp_ready
  input  xdmaChannel_h2cDescByp_ready;

  // value method xdmaChannel_h2cDescByp_load
  output xdmaChannel_h2cDescByp_load;

  // value method xdmaChannel_h2cDescByp_srcAddr
  output [63 : 0] xdmaChannel_h2cDescByp_src_addr;

  // value method xdmaChannel_h2cDescByp_dstAddr
  output [63 : 0] xdmaChannel_h2cDescByp_dst_addr;

  // value method xdmaChannel_h2cDescByp_len
  output [27 : 0] xdmaChannel_h2cDescByp_len;

  // value method xdmaChannel_h2cDescByp_ctl
  output [4 : 0] xdmaChannel_h2cDescByp_ctl;

  // action method xdmaChannel_h2cDescByp_descDone
  input  xdmaChannel_h2cDescByp_desc_done;

  // action method xdmaChannel_c2hDescByp_ready
  input  xdmaChannel_c2hDescByp_ready;

  // value method xdmaChannel_c2hDescByp_load
  output xdmaChannel_c2hDescByp_load;

  // value method xdmaChannel_c2hDescByp_srcAddr
  output [63 : 0] xdmaChannel_c2hDescByp_src_addr;

  // value method xdmaChannel_c2hDescByp_dstAddr
  output [63 : 0] xdmaChannel_c2hDescByp_dst_addr;

  // value method xdmaChannel_c2hDescByp_len
  output [27 : 0] xdmaChannel_c2hDescByp_len;

  // value method xdmaChannel_c2hDescByp_ctl
  output [4 : 0] xdmaChannel_c2hDescByp_ctl;

  // action method xdmaChannel_c2hDescByp_descDone
  input  xdmaChannel_c2hDescByp_desc_done;

  // action method axilRegBlock_wrSlave_awValidData
  input  axilRegBlock_awvalid;
  input  [11 : 0] axilRegBlock_awaddr;
  input  [2 : 0] axilRegBlock_awprot;

  // value method axilRegBlock_wrSlave_awReady
  output axilRegBlock_awready;

  // action method axilRegBlock_wrSlave_wValidData
  input  axilRegBlock_wvalid;
  input  [31 : 0] axilRegBlock_wdata;
  input  [3 : 0] axilRegBlock_wstrb;

  // value method axilRegBlock_wrSlave_wReady
  output axilRegBlock_wready;

  // value method axilRegBlock_wrSlave_bValid
  output axilRegBlock_bvalid;

  // value method axilRegBlock_wrSlave_bResp
  output [1 : 0] axilRegBlock_bresp;

  // action method axilRegBlock_wrSlave_bReady
  input  axilRegBlock_bready;

  // action method axilRegBlock_rdSlave_arValidData
  input  axilRegBlock_arvalid;
  input  [11 : 0] axilRegBlock_araddr;
  input  [2 : 0] axilRegBlock_arprot;

  // value method axilRegBlock_rdSlave_arReady
  output axilRegBlock_arready;

  // value method axilRegBlock_rdSlave_rValid
  output axilRegBlock_rvalid;

  // value method axilRegBlock_rdSlave_rResp
  output [1 : 0] axilRegBlock_rresp;

  // value method axilRegBlock_rdSlave_rData
  output [31 : 0] axilRegBlock_rdata;

  // action method axilRegBlock_rdSlave_rReady
  input  axilRegBlock_rready;

  // signals for module outputs
  wire [255 : 0] xdmaChannel_rawC2hAxiStream_tdata;
  wire [63 : 0] xdmaChannel_c2hDescByp_dst_addr,
		xdmaChannel_c2hDescByp_src_addr,
		xdmaChannel_h2cDescByp_dst_addr,
		xdmaChannel_h2cDescByp_src_addr;
  wire [31 : 0] axilRegBlock_rdata, xdmaChannel_rawC2hAxiStream_tkeep;
  wire [27 : 0] xdmaChannel_c2hDescByp_len, xdmaChannel_h2cDescByp_len;
  wire [4 : 0] xdmaChannel_c2hDescByp_ctl, xdmaChannel_h2cDescByp_ctl;
  wire [1 : 0] axilRegBlock_bresp, axilRegBlock_rresp;
  wire axilRegBlock_arready,
       axilRegBlock_awready,
       axilRegBlock_bvalid,
       axilRegBlock_rvalid,
       axilRegBlock_wready,
       xdmaChannel_c2hDescByp_load,
       xdmaChannel_h2cDescByp_load,
       xdmaChannel_rawC2hAxiStream_tlast,
       xdmaChannel_rawC2hAxiStream_tvalid,
       xdmaChannel_rawH2cAxiStream_tready;

  // inlined wires
  wire [35 : 0] regBlock_ctlAxilSlave_rawWrDataBus_dataW_wget;
  wire [27 : 0] regBlock_transSize_port2__read;
  wire [14 : 0] regBlock_ctlAxilSlave_rawRdAddrBus_dataW_wget,
		regBlock_ctlAxilSlave_rawWrAddrBus_dataW_wget;
  wire regBlock_transSize_EN_port1__write;

  // register regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset
  reg regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset;
  wire regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset_D_IN,
       regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset_EN;

  // register regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset
  reg regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset;
  wire regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset_D_IN,
       regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset_EN;

  // register regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset
  reg regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset;
  wire regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset_D_IN,
       regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset_EN;

  // register regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset
  reg regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset;
  wire regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset_D_IN,
       regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset_EN;

  // register regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset
  reg regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset;
  wire regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset_D_IN,
       regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset_EN;

  // register regBlock_transSize
  reg [27 : 0] regBlock_transSize;
  wire [27 : 0] regBlock_transSize_D_IN;
  wire regBlock_transSize_EN;

  // ports of submodule regBlock_ctrlRdAddrFifo
  wire [14 : 0] regBlock_ctrlRdAddrFifo_D_IN;
  wire regBlock_ctrlRdAddrFifo_CLR,
       regBlock_ctrlRdAddrFifo_DEQ,
       regBlock_ctrlRdAddrFifo_EMPTY_N,
       regBlock_ctrlRdAddrFifo_ENQ,
       regBlock_ctrlRdAddrFifo_FULL_N;

  // ports of submodule regBlock_ctrlRdDataFifo
  wire [33 : 0] regBlock_ctrlRdDataFifo_D_IN, regBlock_ctrlRdDataFifo_D_OUT;
  wire regBlock_ctrlRdDataFifo_CLR,
       regBlock_ctrlRdDataFifo_DEQ,
       regBlock_ctrlRdDataFifo_EMPTY_N,
       regBlock_ctrlRdDataFifo_ENQ,
       regBlock_ctrlRdDataFifo_FULL_N;

  // ports of submodule regBlock_ctrlWrAddrFifo
  wire [14 : 0] regBlock_ctrlWrAddrFifo_D_IN, regBlock_ctrlWrAddrFifo_D_OUT;
  wire regBlock_ctrlWrAddrFifo_CLR,
       regBlock_ctrlWrAddrFifo_DEQ,
       regBlock_ctrlWrAddrFifo_EMPTY_N,
       regBlock_ctrlWrAddrFifo_ENQ,
       regBlock_ctrlWrAddrFifo_FULL_N;

  // ports of submodule regBlock_ctrlWrDataFifo
  wire [35 : 0] regBlock_ctrlWrDataFifo_D_IN, regBlock_ctrlWrDataFifo_D_OUT;
  wire regBlock_ctrlWrDataFifo_CLR,
       regBlock_ctrlWrDataFifo_DEQ,
       regBlock_ctrlWrDataFifo_EMPTY_N,
       regBlock_ctrlWrDataFifo_ENQ,
       regBlock_ctrlWrDataFifo_FULL_N;

  // ports of submodule regBlock_ctrlWrRespFifo
  wire [1 : 0] regBlock_ctrlWrRespFifo_D_IN, regBlock_ctrlWrRespFifo_D_OUT;
  wire regBlock_ctrlWrRespFifo_CLR,
       regBlock_ctrlWrRespFifo_DEQ,
       regBlock_ctrlWrRespFifo_EMPTY_N,
       regBlock_ctrlWrRespFifo_ENQ,
       regBlock_ctrlWrRespFifo_FULL_N;

  // ports of submodule xdmaWrap
  wire [418 : 0] xdmaWrap_dmaWriteSrv_request_put;
  wire [255 : 0] xdmaWrap_xdmaChannel_rawC2hAxiStream_tdata,
		 xdmaWrap_xdmaChannel_rawH2cAxiStream_tdata;
  wire [168 : 0] xdmaWrap_dmaReadSrv_request_put;
  wire [63 : 0] xdmaWrap_xdmaChannel_c2hDescByp_dst_addr,
		xdmaWrap_xdmaChannel_c2hDescByp_src_addr,
		xdmaWrap_xdmaChannel_h2cDescByp_dst_addr,
		xdmaWrap_xdmaChannel_h2cDescByp_src_addr;
  wire [31 : 0] xdmaWrap_xdmaChannel_rawC2hAxiStream_tkeep,
		xdmaWrap_xdmaChannel_rawH2cAxiStream_tkeep;
  wire [27 : 0] xdmaWrap_xdmaChannel_c2hDescByp_len,
		xdmaWrap_xdmaChannel_h2cDescByp_len;
  wire [4 : 0] xdmaWrap_xdmaChannel_c2hDescByp_ctl,
	       xdmaWrap_xdmaChannel_h2cDescByp_ctl;
  wire xdmaWrap_EN_dmaReadSrv_request_put,
       xdmaWrap_EN_dmaReadSrv_response_get,
       xdmaWrap_EN_dmaWriteSrv_request_put,
       xdmaWrap_EN_dmaWriteSrv_response_get,
       xdmaWrap_RDY_dmaReadSrv_request_put,
       xdmaWrap_RDY_dmaReadSrv_response_get,
       xdmaWrap_RDY_dmaWriteSrv_request_put,
       xdmaWrap_RDY_dmaWriteSrv_response_get,
       xdmaWrap_xdmaChannel_c2hDescByp_desc_done,
       xdmaWrap_xdmaChannel_c2hDescByp_load,
       xdmaWrap_xdmaChannel_c2hDescByp_ready,
       xdmaWrap_xdmaChannel_h2cDescByp_desc_done,
       xdmaWrap_xdmaChannel_h2cDescByp_load,
       xdmaWrap_xdmaChannel_h2cDescByp_ready,
       xdmaWrap_xdmaChannel_rawC2hAxiStream_tlast,
       xdmaWrap_xdmaChannel_rawC2hAxiStream_tready,
       xdmaWrap_xdmaChannel_rawC2hAxiStream_tvalid,
       xdmaWrap_xdmaChannel_rawH2cAxiStream_tlast,
       xdmaWrap_xdmaChannel_rawH2cAxiStream_tready,
       xdmaWrap_xdmaChannel_rawH2cAxiStream_tvalid;

  // rule scheduling signals
  wire WILL_FIRE_RL_regBlock_readControlCmd;

  // value method xdmaChannel_rawH2cAxiStream_tReady
  assign xdmaChannel_rawH2cAxiStream_tready =
	     xdmaWrap_xdmaChannel_rawH2cAxiStream_tready ;

  // value method xdmaChannel_rawC2hAxiStream_tValid
  assign xdmaChannel_rawC2hAxiStream_tvalid =
	     xdmaWrap_xdmaChannel_rawC2hAxiStream_tvalid ;

  // value method xdmaChannel_rawC2hAxiStream_tData
  assign xdmaChannel_rawC2hAxiStream_tdata =
	     xdmaWrap_xdmaChannel_rawC2hAxiStream_tdata ;

  // value method xdmaChannel_rawC2hAxiStream_tKeep
  assign xdmaChannel_rawC2hAxiStream_tkeep =
	     xdmaWrap_xdmaChannel_rawC2hAxiStream_tkeep ;

  // value method xdmaChannel_rawC2hAxiStream_tLast
  assign xdmaChannel_rawC2hAxiStream_tlast =
	     xdmaWrap_xdmaChannel_rawC2hAxiStream_tlast ;

  // value method xdmaChannel_h2cDescByp_load
  assign xdmaChannel_h2cDescByp_load = xdmaWrap_xdmaChannel_h2cDescByp_load ;

  // value method xdmaChannel_h2cDescByp_srcAddr
  assign xdmaChannel_h2cDescByp_src_addr =
	     xdmaWrap_xdmaChannel_h2cDescByp_src_addr ;

  // value method xdmaChannel_h2cDescByp_dstAddr
  assign xdmaChannel_h2cDescByp_dst_addr =
	     xdmaWrap_xdmaChannel_h2cDescByp_dst_addr ;

  // value method xdmaChannel_h2cDescByp_len
  assign xdmaChannel_h2cDescByp_len = xdmaWrap_xdmaChannel_h2cDescByp_len ;

  // value method xdmaChannel_h2cDescByp_ctl
  assign xdmaChannel_h2cDescByp_ctl = xdmaWrap_xdmaChannel_h2cDescByp_ctl ;

  // value method xdmaChannel_c2hDescByp_load
  assign xdmaChannel_c2hDescByp_load = xdmaWrap_xdmaChannel_c2hDescByp_load ;

  // value method xdmaChannel_c2hDescByp_srcAddr
  assign xdmaChannel_c2hDescByp_src_addr =
	     xdmaWrap_xdmaChannel_c2hDescByp_src_addr ;

  // value method xdmaChannel_c2hDescByp_dstAddr
  assign xdmaChannel_c2hDescByp_dst_addr =
	     xdmaWrap_xdmaChannel_c2hDescByp_dst_addr ;

  // value method xdmaChannel_c2hDescByp_len
  assign xdmaChannel_c2hDescByp_len = xdmaWrap_xdmaChannel_c2hDescByp_len ;

  // value method xdmaChannel_c2hDescByp_ctl
  assign xdmaChannel_c2hDescByp_ctl = xdmaWrap_xdmaChannel_c2hDescByp_ctl ;

  // value method axilRegBlock_wrSlave_awReady
  assign axilRegBlock_awready =
	     !regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset &&
	     regBlock_ctrlWrAddrFifo_FULL_N ;

  // value method axilRegBlock_wrSlave_wReady
  assign axilRegBlock_wready =
	     !regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset &&
	     regBlock_ctrlWrDataFifo_FULL_N ;

  // value method axilRegBlock_wrSlave_bValid
  assign axilRegBlock_bvalid =
	     !regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset &&
	     regBlock_ctrlWrRespFifo_EMPTY_N ;

  // value method axilRegBlock_wrSlave_bResp
  assign axilRegBlock_bresp = regBlock_ctrlWrRespFifo_D_OUT ;

  // value method axilRegBlock_rdSlave_arReady
  assign axilRegBlock_arready =
	     !regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset &&
	     regBlock_ctrlRdAddrFifo_FULL_N ;

  // value method axilRegBlock_rdSlave_rValid
  assign axilRegBlock_rvalid =
	     !regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset &&
	     regBlock_ctrlRdDataFifo_EMPTY_N ;

  // value method axilRegBlock_rdSlave_rResp
  assign axilRegBlock_rresp = regBlock_ctrlRdDataFifo_D_OUT[33:32] ;

  // value method axilRegBlock_rdSlave_rData
  assign axilRegBlock_rdata = regBlock_ctrlRdDataFifo_D_OUT[31:0] ;

  // submodule regBlock_ctrlRdAddrFifo
  FIFO2 #(.width(32'd15), .guarded(1'd1)) regBlock_ctrlRdAddrFifo(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(regBlock_ctrlRdAddrFifo_D_IN),
								  .ENQ(regBlock_ctrlRdAddrFifo_ENQ),
								  .DEQ(regBlock_ctrlRdAddrFifo_DEQ),
								  .CLR(regBlock_ctrlRdAddrFifo_CLR),
								  .D_OUT(),
								  .FULL_N(regBlock_ctrlRdAddrFifo_FULL_N),
								  .EMPTY_N(regBlock_ctrlRdAddrFifo_EMPTY_N));

  // submodule regBlock_ctrlRdDataFifo
  FIFO2 #(.width(32'd34), .guarded(1'd1)) regBlock_ctrlRdDataFifo(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(regBlock_ctrlRdDataFifo_D_IN),
								  .ENQ(regBlock_ctrlRdDataFifo_ENQ),
								  .DEQ(regBlock_ctrlRdDataFifo_DEQ),
								  .CLR(regBlock_ctrlRdDataFifo_CLR),
								  .D_OUT(regBlock_ctrlRdDataFifo_D_OUT),
								  .FULL_N(regBlock_ctrlRdDataFifo_FULL_N),
								  .EMPTY_N(regBlock_ctrlRdDataFifo_EMPTY_N));

  // submodule regBlock_ctrlWrAddrFifo
  FIFO2 #(.width(32'd15), .guarded(1'd1)) regBlock_ctrlWrAddrFifo(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(regBlock_ctrlWrAddrFifo_D_IN),
								  .ENQ(regBlock_ctrlWrAddrFifo_ENQ),
								  .DEQ(regBlock_ctrlWrAddrFifo_DEQ),
								  .CLR(regBlock_ctrlWrAddrFifo_CLR),
								  .D_OUT(regBlock_ctrlWrAddrFifo_D_OUT),
								  .FULL_N(regBlock_ctrlWrAddrFifo_FULL_N),
								  .EMPTY_N(regBlock_ctrlWrAddrFifo_EMPTY_N));

  // submodule regBlock_ctrlWrDataFifo
  FIFO2 #(.width(32'd36), .guarded(1'd1)) regBlock_ctrlWrDataFifo(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(regBlock_ctrlWrDataFifo_D_IN),
								  .ENQ(regBlock_ctrlWrDataFifo_ENQ),
								  .DEQ(regBlock_ctrlWrDataFifo_DEQ),
								  .CLR(regBlock_ctrlWrDataFifo_CLR),
								  .D_OUT(regBlock_ctrlWrDataFifo_D_OUT),
								  .FULL_N(regBlock_ctrlWrDataFifo_FULL_N),
								  .EMPTY_N(regBlock_ctrlWrDataFifo_EMPTY_N));

  // submodule regBlock_ctrlWrRespFifo
  FIFO2 #(.width(32'd2), .guarded(1'd1)) regBlock_ctrlWrRespFifo(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(regBlock_ctrlWrRespFifo_D_IN),
								 .ENQ(regBlock_ctrlWrRespFifo_ENQ),
								 .DEQ(regBlock_ctrlWrRespFifo_DEQ),
								 .CLR(regBlock_ctrlWrRespFifo_CLR),
								 .D_OUT(regBlock_ctrlWrRespFifo_D_OUT),
								 .FULL_N(regBlock_ctrlWrRespFifo_FULL_N),
								 .EMPTY_N(regBlock_ctrlWrRespFifo_EMPTY_N));

  // submodule xdmaWrap
  mkXdmaWrapper xdmaWrap(.CLK(CLK),
			 .RST_N(RST_N),
			 .dmaReadSrv_request_put(xdmaWrap_dmaReadSrv_request_put),
			 .dmaWriteSrv_request_put(xdmaWrap_dmaWriteSrv_request_put),
			 .xdmaChannel_c2hDescByp_desc_done(xdmaWrap_xdmaChannel_c2hDescByp_desc_done),
			 .xdmaChannel_c2hDescByp_ready(xdmaWrap_xdmaChannel_c2hDescByp_ready),
			 .xdmaChannel_h2cDescByp_desc_done(xdmaWrap_xdmaChannel_h2cDescByp_desc_done),
			 .xdmaChannel_h2cDescByp_ready(xdmaWrap_xdmaChannel_h2cDescByp_ready),
			 .xdmaChannel_rawC2hAxiStream_tready(xdmaWrap_xdmaChannel_rawC2hAxiStream_tready),
			 .xdmaChannel_rawH2cAxiStream_tdata(xdmaWrap_xdmaChannel_rawH2cAxiStream_tdata),
			 .xdmaChannel_rawH2cAxiStream_tkeep(xdmaWrap_xdmaChannel_rawH2cAxiStream_tkeep),
			 .xdmaChannel_rawH2cAxiStream_tlast(xdmaWrap_xdmaChannel_rawH2cAxiStream_tlast),
			 .xdmaChannel_rawH2cAxiStream_tvalid(xdmaWrap_xdmaChannel_rawH2cAxiStream_tvalid),
			 .EN_dmaReadSrv_request_put(xdmaWrap_EN_dmaReadSrv_request_put),
			 .EN_dmaReadSrv_response_get(xdmaWrap_EN_dmaReadSrv_response_get),
			 .EN_dmaWriteSrv_request_put(xdmaWrap_EN_dmaWriteSrv_request_put),
			 .EN_dmaWriteSrv_response_get(xdmaWrap_EN_dmaWriteSrv_response_get),
			 .RDY_dmaReadSrv_request_put(xdmaWrap_RDY_dmaReadSrv_request_put),
			 .dmaReadSrv_response_get(),
			 .RDY_dmaReadSrv_response_get(xdmaWrap_RDY_dmaReadSrv_response_get),
			 .RDY_dmaWriteSrv_request_put(xdmaWrap_RDY_dmaWriteSrv_request_put),
			 .dmaWriteSrv_response_get(),
			 .RDY_dmaWriteSrv_response_get(xdmaWrap_RDY_dmaWriteSrv_response_get),
			 .xdmaChannel_rawH2cAxiStream_tready(xdmaWrap_xdmaChannel_rawH2cAxiStream_tready),
			 .xdmaChannel_rawC2hAxiStream_tvalid(xdmaWrap_xdmaChannel_rawC2hAxiStream_tvalid),
			 .xdmaChannel_rawC2hAxiStream_tdata(xdmaWrap_xdmaChannel_rawC2hAxiStream_tdata),
			 .xdmaChannel_rawC2hAxiStream_tkeep(xdmaWrap_xdmaChannel_rawC2hAxiStream_tkeep),
			 .xdmaChannel_rawC2hAxiStream_tlast(xdmaWrap_xdmaChannel_rawC2hAxiStream_tlast),
			 .xdmaChannel_h2cDescByp_load(xdmaWrap_xdmaChannel_h2cDescByp_load),
			 .xdmaChannel_h2cDescByp_src_addr(xdmaWrap_xdmaChannel_h2cDescByp_src_addr),
			 .xdmaChannel_h2cDescByp_dst_addr(xdmaWrap_xdmaChannel_h2cDescByp_dst_addr),
			 .xdmaChannel_h2cDescByp_len(xdmaWrap_xdmaChannel_h2cDescByp_len),
			 .xdmaChannel_h2cDescByp_ctl(xdmaWrap_xdmaChannel_h2cDescByp_ctl),
			 .xdmaChannel_c2hDescByp_load(xdmaWrap_xdmaChannel_c2hDescByp_load),
			 .xdmaChannel_c2hDescByp_src_addr(xdmaWrap_xdmaChannel_c2hDescByp_src_addr),
			 .xdmaChannel_c2hDescByp_dst_addr(xdmaWrap_xdmaChannel_c2hDescByp_dst_addr),
			 .xdmaChannel_c2hDescByp_len(xdmaWrap_xdmaChannel_c2hDescByp_len),
			 .xdmaChannel_c2hDescByp_ctl(xdmaWrap_xdmaChannel_c2hDescByp_ctl));

  // rule RL_regBlock_readControlCmd
  assign WILL_FIRE_RL_regBlock_readControlCmd =
	     regBlock_ctrlWrAddrFifo_EMPTY_N &&
	     regBlock_ctrlWrDataFifo_EMPTY_N &&
	     regBlock_ctrlWrRespFifo_FULL_N &&
	     regBlock_transSize == 28'd0 ;

  // inlined wires
  assign regBlock_ctlAxilSlave_rawWrAddrBus_dataW_wget =
	     { axilRegBlock_awaddr, axilRegBlock_awprot } ;
  assign regBlock_ctlAxilSlave_rawWrDataBus_dataW_wget =
	     { axilRegBlock_wdata, axilRegBlock_wstrb } ;
  assign regBlock_ctlAxilSlave_rawRdAddrBus_dataW_wget =
	     { axilRegBlock_araddr, axilRegBlock_arprot } ;
  assign regBlock_transSize_EN_port1__write =
	     WILL_FIRE_RL_regBlock_readControlCmd &&
	     regBlock_ctrlWrAddrFifo_D_OUT[7:3] == 5'd16 ;
  assign regBlock_transSize_port2__read =
	     regBlock_transSize_EN_port1__write ?
	       regBlock_ctrlWrDataFifo_D_OUT[31:4] :
	       regBlock_transSize ;

  // register regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset
  assign regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset_D_IN = 1'd0 ;
  assign regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset_EN =
	     regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset ;

  // register regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset
  assign regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset_D_IN = 1'd0 ;
  assign regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset_EN =
	     regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset ;

  // register regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset
  assign regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset_D_IN = 1'd0 ;
  assign regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset_EN =
	     regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset ;

  // register regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset
  assign regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset_D_IN = 1'd0 ;
  assign regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset_EN =
	     regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset ;

  // register regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset
  assign regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset_D_IN = 1'd0 ;
  assign regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset_EN =
	     regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset ;

  // register regBlock_transSize
  assign regBlock_transSize_D_IN = regBlock_transSize_port2__read ;
  assign regBlock_transSize_EN = 1'b1 ;

  // submodule regBlock_ctrlRdAddrFifo
  assign regBlock_ctrlRdAddrFifo_D_IN =
	     regBlock_ctlAxilSlave_rawRdAddrBus_dataW_wget ;
  assign regBlock_ctrlRdAddrFifo_ENQ =
	     regBlock_ctrlRdAddrFifo_FULL_N &&
	     !regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset &&
	     axilRegBlock_arvalid ;
  assign regBlock_ctrlRdAddrFifo_DEQ =
	     regBlock_ctrlRdAddrFifo_EMPTY_N &&
	     regBlock_ctrlRdDataFifo_FULL_N ;
  assign regBlock_ctrlRdAddrFifo_CLR = 1'b0 ;

  // submodule regBlock_ctrlRdDataFifo
  assign regBlock_ctrlRdDataFifo_D_IN = 34'h0ABCD4321 ;
  assign regBlock_ctrlRdDataFifo_ENQ =
	     regBlock_ctrlRdAddrFifo_EMPTY_N &&
	     regBlock_ctrlRdDataFifo_FULL_N ;
  assign regBlock_ctrlRdDataFifo_DEQ =
	     regBlock_ctrlRdDataFifo_EMPTY_N &&
	     !regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset &&
	     axilRegBlock_rready ;
  assign regBlock_ctrlRdDataFifo_CLR = 1'b0 ;

  // submodule regBlock_ctrlWrAddrFifo
  assign regBlock_ctrlWrAddrFifo_D_IN =
	     regBlock_ctlAxilSlave_rawWrAddrBus_dataW_wget ;
  assign regBlock_ctrlWrAddrFifo_ENQ =
	     regBlock_ctrlWrAddrFifo_FULL_N &&
	     !regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset &&
	     axilRegBlock_awvalid ;
  assign regBlock_ctrlWrAddrFifo_DEQ = WILL_FIRE_RL_regBlock_readControlCmd ;
  assign regBlock_ctrlWrAddrFifo_CLR = 1'b0 ;

  // submodule regBlock_ctrlWrDataFifo
  assign regBlock_ctrlWrDataFifo_D_IN =
	     regBlock_ctlAxilSlave_rawWrDataBus_dataW_wget ;
  assign regBlock_ctrlWrDataFifo_ENQ =
	     regBlock_ctrlWrDataFifo_FULL_N &&
	     !regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset &&
	     axilRegBlock_wvalid ;
  assign regBlock_ctrlWrDataFifo_DEQ = WILL_FIRE_RL_regBlock_readControlCmd ;
  assign regBlock_ctrlWrDataFifo_CLR = 1'b0 ;

  // submodule regBlock_ctrlWrRespFifo
  assign regBlock_ctrlWrRespFifo_D_IN = 2'd0 ;
  assign regBlock_ctrlWrRespFifo_ENQ = WILL_FIRE_RL_regBlock_readControlCmd ;
  assign regBlock_ctrlWrRespFifo_DEQ =
	     regBlock_ctrlWrRespFifo_EMPTY_N &&
	     !regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset &&
	     axilRegBlock_bready ;
  assign regBlock_ctrlWrRespFifo_CLR = 1'b0 ;

  // submodule xdmaWrap
  assign xdmaWrap_dmaReadSrv_request_put =
	     169'h0000000200000000000000000100000000000000000 ;
  assign xdmaWrap_dmaWriteSrv_request_put =
	     419'h00000008000000000000000004000000000000000000000000000000000000000000000000000000000000001858589880000003F ;
  assign xdmaWrap_xdmaChannel_c2hDescByp_desc_done =
	     xdmaChannel_c2hDescByp_desc_done ;
  assign xdmaWrap_xdmaChannel_c2hDescByp_ready =
	     xdmaChannel_c2hDescByp_ready ;
  assign xdmaWrap_xdmaChannel_h2cDescByp_desc_done =
	     xdmaChannel_h2cDescByp_desc_done ;
  assign xdmaWrap_xdmaChannel_h2cDescByp_ready =
	     xdmaChannel_h2cDescByp_ready ;
  assign xdmaWrap_xdmaChannel_rawC2hAxiStream_tready =
	     xdmaChannel_rawC2hAxiStream_tready ;
  assign xdmaWrap_xdmaChannel_rawH2cAxiStream_tdata =
	     xdmaChannel_rawH2cAxiStream_tdata ;
  assign xdmaWrap_xdmaChannel_rawH2cAxiStream_tkeep =
	     xdmaChannel_rawH2cAxiStream_tkeep ;
  assign xdmaWrap_xdmaChannel_rawH2cAxiStream_tlast =
	     xdmaChannel_rawH2cAxiStream_tlast ;
  assign xdmaWrap_xdmaChannel_rawH2cAxiStream_tvalid =
	     xdmaChannel_rawH2cAxiStream_tvalid ;
  assign xdmaWrap_EN_dmaReadSrv_request_put =
	     xdmaWrap_RDY_dmaReadSrv_request_put ;
  assign xdmaWrap_EN_dmaReadSrv_response_get =
	     xdmaWrap_RDY_dmaReadSrv_response_get ;
  assign xdmaWrap_EN_dmaWriteSrv_request_put =
	     xdmaWrap_RDY_dmaWriteSrv_request_put ;
  assign xdmaWrap_EN_dmaWriteSrv_response_get =
	     xdmaWrap_RDY_dmaWriteSrv_response_get ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        regBlock_transSize <= `BSV_ASSIGNMENT_DELAY 28'd0;
      end
    else
      begin
        if (regBlock_transSize_EN)
	  regBlock_transSize <= `BSV_ASSIGNMENT_DELAY regBlock_transSize_D_IN;
      end
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
      regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
      regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
      regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
      regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset_EN)
	regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset_D_IN;
      if (regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset_EN)
	regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset_D_IN;
      if (regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset_EN)
	regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset_D_IN;
      if (regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset_EN)
	regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset_D_IN;
      if (regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset_EN)
	regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    regBlock_ctlAxilSlave_rawRdAddrBus_isReset_isInReset = 1'h0;
    regBlock_ctlAxilSlave_rawRdDataBus_isReset_isInReset = 1'h0;
    regBlock_ctlAxilSlave_rawWrAddrBus_isReset_isInReset = 1'h0;
    regBlock_ctlAxilSlave_rawWrDataBus_isReset_isInReset = 1'h0;
    regBlock_ctlAxilSlave_rawWrRespBus_isReset_isInReset = 1'h0;
    regBlock_transSize = 28'hAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_regBlock_readControlCmd &&
	  regBlock_ctrlWrAddrFifo_D_OUT[7:3] == 5'd16)
	$display("set size");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_regBlock_readControlCmd &&
	  regBlock_ctrlWrAddrFifo_D_OUT[7:3] != 5'd0 &&
	  regBlock_ctrlWrAddrFifo_D_OUT[7:3] != 5'd4 &&
	  regBlock_ctrlWrAddrFifo_D_OUT[7:3] != 5'd8 &&
	  regBlock_ctrlWrAddrFifo_D_OUT[7:3] != 5'd12 &&
	  regBlock_ctrlWrAddrFifo_D_OUT[7:3] != 5'd16)
	$display("unknown addr");
  end
  // synopsys translate_on
endmodule  // mkBsvTop

