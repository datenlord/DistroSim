//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// On Wed Nov  8 22:40:09 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_dmaReadSrv_request_put     O     1 reg
// dmaReadSrv_response_get        O   383 reg
// RDY_dmaReadSrv_response_get    O     1 reg
// RDY_dmaWriteSrv_request_put    O     1 reg
// dmaWriteSrv_response_get       O    53 reg
// RDY_dmaWriteSrv_response_get   O     1 reg
// xdmaChannel_rawH2cAxiStream_tready  O     1
// xdmaChannel_rawC2hAxiStream_tvalid  O     1
// xdmaChannel_rawC2hAxiStream_tdata  O   256 reg
// xdmaChannel_rawC2hAxiStream_tkeep  O    32 reg
// xdmaChannel_rawC2hAxiStream_tlast  O     1 reg
// xdmaChannel_h2cDescByp_load    O     1
// xdmaChannel_h2cDescByp_src_addr  O    64 reg
// xdmaChannel_h2cDescByp_dst_addr  O    64 const
// xdmaChannel_h2cDescByp_len     O    28
// xdmaChannel_h2cDescByp_ctl     O     5 const
// xdmaChannel_c2hDescByp_load    O     1
// xdmaChannel_c2hDescByp_src_addr  O    64 const
// xdmaChannel_c2hDescByp_dst_addr  O    64 reg
// xdmaChannel_c2hDescByp_len     O    28
// xdmaChannel_c2hDescByp_ctl     O     5 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// dmaReadSrv_request_put         I   169 reg
// dmaWriteSrv_request_put        I   419 reg
// xdmaChannel_rawH2cAxiStream_tvalid  I     1
// xdmaChannel_rawH2cAxiStream_tdata  I   256 reg
// xdmaChannel_rawH2cAxiStream_tkeep  I    32 reg
// xdmaChannel_rawH2cAxiStream_tlast  I     1 reg
// xdmaChannel_rawC2hAxiStream_tready  I     1
// xdmaChannel_h2cDescByp_ready   I     1
// xdmaChannel_h2cDescByp_desc_done  I     1 unused
// xdmaChannel_c2hDescByp_ready   I     1
// xdmaChannel_c2hDescByp_desc_done  I     1 unused
// EN_dmaReadSrv_request_put      I     1
// EN_dmaWriteSrv_request_put     I     1
// EN_dmaReadSrv_response_get     I     1
// EN_dmaWriteSrv_response_get    I     1
//
// Combinational paths from inputs to outputs:
//   xdmaChannel_h2cDescByp_ready -> xdmaChannel_h2cDescByp_load
//   xdmaChannel_h2cDescByp_ready -> xdmaChannel_h2cDescByp_src_addr
//   xdmaChannel_h2cDescByp_ready -> xdmaChannel_h2cDescByp_len
//   xdmaChannel_c2hDescByp_ready -> xdmaChannel_c2hDescByp_load
//   xdmaChannel_c2hDescByp_ready -> xdmaChannel_c2hDescByp_dst_addr
//   xdmaChannel_c2hDescByp_ready -> xdmaChannel_c2hDescByp_len
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkXdmaWrapper(CLK,
		     RST_N,

		     dmaReadSrv_request_put,
		     EN_dmaReadSrv_request_put,
		     RDY_dmaReadSrv_request_put,

		     EN_dmaReadSrv_response_get,
		     dmaReadSrv_response_get,
		     RDY_dmaReadSrv_response_get,

		     dmaWriteSrv_request_put,
		     EN_dmaWriteSrv_request_put,
		     RDY_dmaWriteSrv_request_put,

		     EN_dmaWriteSrv_response_get,
		     dmaWriteSrv_response_get,
		     RDY_dmaWriteSrv_response_get,

		     xdmaChannel_rawH2cAxiStream_tvalid,
		     xdmaChannel_rawH2cAxiStream_tdata,
		     xdmaChannel_rawH2cAxiStream_tkeep,
		     xdmaChannel_rawH2cAxiStream_tlast,

		     xdmaChannel_rawH2cAxiStream_tready,

		     xdmaChannel_rawC2hAxiStream_tvalid,

		     xdmaChannel_rawC2hAxiStream_tdata,

		     xdmaChannel_rawC2hAxiStream_tkeep,

		     xdmaChannel_rawC2hAxiStream_tlast,

		     xdmaChannel_rawC2hAxiStream_tready,

		     xdmaChannel_h2cDescByp_ready,

		     xdmaChannel_h2cDescByp_load,

		     xdmaChannel_h2cDescByp_src_addr,

		     xdmaChannel_h2cDescByp_dst_addr,

		     xdmaChannel_h2cDescByp_len,

		     xdmaChannel_h2cDescByp_ctl,

		     xdmaChannel_h2cDescByp_desc_done,

		     xdmaChannel_c2hDescByp_ready,

		     xdmaChannel_c2hDescByp_load,

		     xdmaChannel_c2hDescByp_src_addr,

		     xdmaChannel_c2hDescByp_dst_addr,

		     xdmaChannel_c2hDescByp_len,

		     xdmaChannel_c2hDescByp_ctl,

		     xdmaChannel_c2hDescByp_desc_done);
  input  CLK;
  input  RST_N;

  // action method dmaReadSrv_request_put
  input  [168 : 0] dmaReadSrv_request_put;
  input  EN_dmaReadSrv_request_put;
  output RDY_dmaReadSrv_request_put;

  // actionvalue method dmaReadSrv_response_get
  input  EN_dmaReadSrv_response_get;
  output [382 : 0] dmaReadSrv_response_get;
  output RDY_dmaReadSrv_response_get;

  // action method dmaWriteSrv_request_put
  input  [418 : 0] dmaWriteSrv_request_put;
  input  EN_dmaWriteSrv_request_put;
  output RDY_dmaWriteSrv_request_put;

  // actionvalue method dmaWriteSrv_response_get
  input  EN_dmaWriteSrv_response_get;
  output [52 : 0] dmaWriteSrv_response_get;
  output RDY_dmaWriteSrv_response_get;

  // action method xdmaChannel_rawH2cAxiStream_tValid
  input  xdmaChannel_rawH2cAxiStream_tvalid;
  input  [255 : 0] xdmaChannel_rawH2cAxiStream_tdata;
  input  [31 : 0] xdmaChannel_rawH2cAxiStream_tkeep;
  input  xdmaChannel_rawH2cAxiStream_tlast;

  // value method xdmaChannel_rawH2cAxiStream_tReady
  output xdmaChannel_rawH2cAxiStream_tready;

  // value method xdmaChannel_rawC2hAxiStream_tValid
  output xdmaChannel_rawC2hAxiStream_tvalid;

  // value method xdmaChannel_rawC2hAxiStream_tData
  output [255 : 0] xdmaChannel_rawC2hAxiStream_tdata;

  // value method xdmaChannel_rawC2hAxiStream_tKeep
  output [31 : 0] xdmaChannel_rawC2hAxiStream_tkeep;

  // value method xdmaChannel_rawC2hAxiStream_tLast
  output xdmaChannel_rawC2hAxiStream_tlast;

  // value method xdmaChannel_rawC2hAxiStream_tUser

  // action method xdmaChannel_rawC2hAxiStream_tReady
  input  xdmaChannel_rawC2hAxiStream_tready;

  // action method xdmaChannel_h2cDescByp_ready
  input  xdmaChannel_h2cDescByp_ready;

  // value method xdmaChannel_h2cDescByp_load
  output xdmaChannel_h2cDescByp_load;

  // value method xdmaChannel_h2cDescByp_srcAddr
  output [63 : 0] xdmaChannel_h2cDescByp_src_addr;

  // value method xdmaChannel_h2cDescByp_dstAddr
  output [63 : 0] xdmaChannel_h2cDescByp_dst_addr;

  // value method xdmaChannel_h2cDescByp_len
  output [27 : 0] xdmaChannel_h2cDescByp_len;

  // value method xdmaChannel_h2cDescByp_ctl
  output [4 : 0] xdmaChannel_h2cDescByp_ctl;

  // action method xdmaChannel_h2cDescByp_descDone
  input  xdmaChannel_h2cDescByp_desc_done;

  // action method xdmaChannel_c2hDescByp_ready
  input  xdmaChannel_c2hDescByp_ready;

  // value method xdmaChannel_c2hDescByp_load
  output xdmaChannel_c2hDescByp_load;

  // value method xdmaChannel_c2hDescByp_srcAddr
  output [63 : 0] xdmaChannel_c2hDescByp_src_addr;

  // value method xdmaChannel_c2hDescByp_dstAddr
  output [63 : 0] xdmaChannel_c2hDescByp_dst_addr;

  // value method xdmaChannel_c2hDescByp_len
  output [27 : 0] xdmaChannel_c2hDescByp_len;

  // value method xdmaChannel_c2hDescByp_ctl
  output [4 : 0] xdmaChannel_c2hDescByp_ctl;

  // action method xdmaChannel_c2hDescByp_descDone
  input  xdmaChannel_c2hDescByp_desc_done;

  // signals for module outputs
  wire [382 : 0] dmaReadSrv_response_get;
  wire [255 : 0] xdmaChannel_rawC2hAxiStream_tdata;
  wire [63 : 0] xdmaChannel_c2hDescByp_dst_addr,
		xdmaChannel_c2hDescByp_src_addr,
		xdmaChannel_h2cDescByp_dst_addr,
		xdmaChannel_h2cDescByp_src_addr;
  wire [52 : 0] dmaWriteSrv_response_get;
  wire [31 : 0] xdmaChannel_rawC2hAxiStream_tkeep;
  wire [27 : 0] xdmaChannel_c2hDescByp_len, xdmaChannel_h2cDescByp_len;
  wire [4 : 0] xdmaChannel_c2hDescByp_ctl, xdmaChannel_h2cDescByp_ctl;
  wire RDY_dmaReadSrv_request_put,
       RDY_dmaReadSrv_response_get,
       RDY_dmaWriteSrv_request_put,
       RDY_dmaWriteSrv_response_get,
       xdmaChannel_c2hDescByp_load,
       xdmaChannel_h2cDescByp_load,
       xdmaChannel_rawC2hAxiStream_tlast,
       xdmaChannel_rawC2hAxiStream_tvalid,
       xdmaChannel_rawH2cAxiStream_tready;

  // inlined wires
  wire [288 : 0] rawH2cSt_rawBus_dataW_wget;

  // register h2cNextBeatIsFirst
  reg h2cNextBeatIsFirst;
  wire h2cNextBeatIsFirst_D_IN, h2cNextBeatIsFirst_EN;

  // register rawC2hSt_rawBus_isReset_isInReset
  reg rawC2hSt_rawBus_isReset_isInReset;
  wire rawC2hSt_rawBus_isReset_isInReset_D_IN,
       rawC2hSt_rawBus_isReset_isInReset_EN;

  // register rawH2cSt_rawBus_isReset_isInReset
  reg rawH2cSt_rawBus_isReset_isInReset;
  wire rawH2cSt_rawBus_isReset_isInReset_D_IN,
       rawH2cSt_rawBus_isReset_isInReset_EN;

  // ports of submodule dmaReadReqQ
  wire [168 : 0] dmaReadReqQ_D_IN, dmaReadReqQ_D_OUT;
  wire dmaReadReqQ_CLR,
       dmaReadReqQ_DEQ,
       dmaReadReqQ_EMPTY_N,
       dmaReadReqQ_ENQ,
       dmaReadReqQ_FULL_N;

  // ports of submodule dmaReadRespQ
  wire [382 : 0] dmaReadRespQ_D_IN, dmaReadRespQ_D_OUT;
  wire dmaReadRespQ_CLR,
       dmaReadRespQ_DEQ,
       dmaReadRespQ_EMPTY_N,
       dmaReadRespQ_ENQ,
       dmaReadRespQ_FULL_N;

  // ports of submodule dmaWriteReqQ
  wire [418 : 0] dmaWriteReqQ_D_IN, dmaWriteReqQ_D_OUT;
  wire dmaWriteReqQ_CLR,
       dmaWriteReqQ_DEQ,
       dmaWriteReqQ_EMPTY_N,
       dmaWriteReqQ_ENQ,
       dmaWriteReqQ_FULL_N;

  // ports of submodule dmaWriteRespQ
  wire [52 : 0] dmaWriteRespQ_D_IN, dmaWriteRespQ_D_OUT;
  wire dmaWriteRespQ_CLR,
       dmaWriteRespQ_DEQ,
       dmaWriteRespQ_EMPTY_N,
       dmaWriteRespQ_ENQ,
       dmaWriteRespQ_FULL_N;

  // ports of submodule readReqProcessingQ
  wire [168 : 0] readReqProcessingQ_D_IN, readReqProcessingQ_D_OUT;
  wire readReqProcessingQ_CLR,
       readReqProcessingQ_DEQ,
       readReqProcessingQ_EMPTY_N,
       readReqProcessingQ_ENQ,
       readReqProcessingQ_FULL_N;

  // ports of submodule writeReqProcessingQ
  wire [418 : 0] writeReqProcessingQ_D_IN, writeReqProcessingQ_D_OUT;
  wire writeReqProcessingQ_CLR,
       writeReqProcessingQ_DEQ,
       writeReqProcessingQ_EMPTY_N,
       writeReqProcessingQ_ENQ,
       writeReqProcessingQ_FULL_N;

  // ports of submodule xdmaC2hStFifo
  wire [288 : 0] xdmaC2hStFifo_D_IN, xdmaC2hStFifo_D_OUT;
  wire xdmaC2hStFifo_CLR,
       xdmaC2hStFifo_DEQ,
       xdmaC2hStFifo_EMPTY_N,
       xdmaC2hStFifo_ENQ,
       xdmaC2hStFifo_FULL_N;

  // ports of submodule xdmaH2cStFifo
  wire [288 : 0] xdmaH2cStFifo_D_IN, xdmaH2cStFifo_D_OUT;
  wire xdmaH2cStFifo_CLR,
       xdmaH2cStFifo_DEQ,
       xdmaH2cStFifo_EMPTY_N,
       xdmaH2cStFifo_ENQ,
       xdmaH2cStFifo_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_forwardC2hDescAndData, WILL_FIRE_RL_forwardH2cDesc;

  // action method dmaReadSrv_request_put
  assign RDY_dmaReadSrv_request_put = dmaReadReqQ_FULL_N ;

  // actionvalue method dmaReadSrv_response_get
  assign dmaReadSrv_response_get = dmaReadRespQ_D_OUT ;
  assign RDY_dmaReadSrv_response_get = dmaReadRespQ_EMPTY_N ;

  // action method dmaWriteSrv_request_put
  assign RDY_dmaWriteSrv_request_put = dmaWriteReqQ_FULL_N ;

  // actionvalue method dmaWriteSrv_response_get
  assign dmaWriteSrv_response_get = dmaWriteRespQ_D_OUT ;
  assign RDY_dmaWriteSrv_response_get = dmaWriteRespQ_EMPTY_N ;

  // value method xdmaChannel_rawH2cAxiStream_tReady
  assign xdmaChannel_rawH2cAxiStream_tready =
	     !rawH2cSt_rawBus_isReset_isInReset && xdmaH2cStFifo_FULL_N ;

  // value method xdmaChannel_rawC2hAxiStream_tValid
  assign xdmaChannel_rawC2hAxiStream_tvalid =
	     !rawC2hSt_rawBus_isReset_isInReset && xdmaC2hStFifo_EMPTY_N ;

  // value method xdmaChannel_rawC2hAxiStream_tData
  assign xdmaChannel_rawC2hAxiStream_tdata = xdmaC2hStFifo_D_OUT[288:33] ;

  // value method xdmaChannel_rawC2hAxiStream_tKeep
  assign xdmaChannel_rawC2hAxiStream_tkeep = xdmaC2hStFifo_D_OUT[32:1] ;

  // value method xdmaChannel_rawC2hAxiStream_tLast
  assign xdmaChannel_rawC2hAxiStream_tlast = xdmaC2hStFifo_D_OUT[0] ;

  // value method xdmaChannel_h2cDescByp_load
  assign xdmaChannel_h2cDescByp_load =
	     xdmaChannel_h2cDescByp_ready && dmaReadReqQ_EMPTY_N ;

  // value method xdmaChannel_h2cDescByp_srcAddr
  assign xdmaChannel_h2cDescByp_src_addr = dmaReadReqQ_D_OUT[140:77] ;

  // value method xdmaChannel_h2cDescByp_dstAddr
  assign xdmaChannel_h2cDescByp_dst_addr = 64'd0 ;

  // value method xdmaChannel_h2cDescByp_len
  assign xdmaChannel_h2cDescByp_len = { 15'd0, dmaReadReqQ_D_OUT[76:64] } ;

  // value method xdmaChannel_h2cDescByp_ctl
  assign xdmaChannel_h2cDescByp_ctl = 5'd16 ;

  // value method xdmaChannel_c2hDescByp_load
  assign xdmaChannel_c2hDescByp_load =
	     xdmaChannel_c2hDescByp_ready && dmaWriteReqQ_EMPTY_N &&
	     dmaWriteReqQ_D_OUT[1] &&
	     writeReqProcessingQ_FULL_N &&
	     xdmaC2hStFifo_FULL_N &&
	     dmaWriteRespQ_FULL_N ;

  // value method xdmaChannel_c2hDescByp_srcAddr
  assign xdmaChannel_c2hDescByp_src_addr = 64'd0 ;

  // value method xdmaChannel_c2hDescByp_dstAddr
  assign xdmaChannel_c2hDescByp_dst_addr = dmaWriteReqQ_D_OUT[390:327] ;

  // value method xdmaChannel_c2hDescByp_len
  assign xdmaChannel_c2hDescByp_len = { 15'd0, dmaWriteReqQ_D_OUT[326:314] } ;

  // value method xdmaChannel_c2hDescByp_ctl
  assign xdmaChannel_c2hDescByp_ctl = 5'd16 ;

  // submodule dmaReadReqQ
  FIFO2 #(.width(32'd169), .guarded(1'd1)) dmaReadReqQ(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(dmaReadReqQ_D_IN),
						       .ENQ(dmaReadReqQ_ENQ),
						       .DEQ(dmaReadReqQ_DEQ),
						       .CLR(dmaReadReqQ_CLR),
						       .D_OUT(dmaReadReqQ_D_OUT),
						       .FULL_N(dmaReadReqQ_FULL_N),
						       .EMPTY_N(dmaReadReqQ_EMPTY_N));

  // submodule dmaReadRespQ
  FIFO2 #(.width(32'd383), .guarded(1'd1)) dmaReadRespQ(.RST(RST_N),
							.CLK(CLK),
							.D_IN(dmaReadRespQ_D_IN),
							.ENQ(dmaReadRespQ_ENQ),
							.DEQ(dmaReadRespQ_DEQ),
							.CLR(dmaReadRespQ_CLR),
							.D_OUT(dmaReadRespQ_D_OUT),
							.FULL_N(dmaReadRespQ_FULL_N),
							.EMPTY_N(dmaReadRespQ_EMPTY_N));

  // submodule dmaWriteReqQ
  FIFO2 #(.width(32'd419), .guarded(1'd1)) dmaWriteReqQ(.RST(RST_N),
							.CLK(CLK),
							.D_IN(dmaWriteReqQ_D_IN),
							.ENQ(dmaWriteReqQ_ENQ),
							.DEQ(dmaWriteReqQ_DEQ),
							.CLR(dmaWriteReqQ_CLR),
							.D_OUT(dmaWriteReqQ_D_OUT),
							.FULL_N(dmaWriteReqQ_FULL_N),
							.EMPTY_N(dmaWriteReqQ_EMPTY_N));

  // submodule dmaWriteRespQ
  FIFO2 #(.width(32'd53), .guarded(1'd1)) dmaWriteRespQ(.RST(RST_N),
							.CLK(CLK),
							.D_IN(dmaWriteRespQ_D_IN),
							.ENQ(dmaWriteRespQ_ENQ),
							.DEQ(dmaWriteRespQ_DEQ),
							.CLR(dmaWriteRespQ_CLR),
							.D_OUT(dmaWriteRespQ_D_OUT),
							.FULL_N(dmaWriteRespQ_FULL_N),
							.EMPTY_N(dmaWriteRespQ_EMPTY_N));

  // submodule readReqProcessingQ
  FIFO2 #(.width(32'd169), .guarded(1'd1)) readReqProcessingQ(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(readReqProcessingQ_D_IN),
							      .ENQ(readReqProcessingQ_ENQ),
							      .DEQ(readReqProcessingQ_DEQ),
							      .CLR(readReqProcessingQ_CLR),
							      .D_OUT(readReqProcessingQ_D_OUT),
							      .FULL_N(readReqProcessingQ_FULL_N),
							      .EMPTY_N(readReqProcessingQ_EMPTY_N));

  // submodule writeReqProcessingQ
  FIFO2 #(.width(32'd419), .guarded(1'd1)) writeReqProcessingQ(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(writeReqProcessingQ_D_IN),
							       .ENQ(writeReqProcessingQ_ENQ),
							       .DEQ(writeReqProcessingQ_DEQ),
							       .CLR(writeReqProcessingQ_CLR),
							       .D_OUT(writeReqProcessingQ_D_OUT),
							       .FULL_N(writeReqProcessingQ_FULL_N),
							       .EMPTY_N(writeReqProcessingQ_EMPTY_N));

  // submodule xdmaC2hStFifo
  FIFO2 #(.width(32'd289), .guarded(1'd1)) xdmaC2hStFifo(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(xdmaC2hStFifo_D_IN),
							 .ENQ(xdmaC2hStFifo_ENQ),
							 .DEQ(xdmaC2hStFifo_DEQ),
							 .CLR(xdmaC2hStFifo_CLR),
							 .D_OUT(xdmaC2hStFifo_D_OUT),
							 .FULL_N(xdmaC2hStFifo_FULL_N),
							 .EMPTY_N(xdmaC2hStFifo_EMPTY_N));

  // submodule xdmaH2cStFifo
  FIFO2 #(.width(32'd289), .guarded(1'd1)) xdmaH2cStFifo(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(xdmaH2cStFifo_D_IN),
							 .ENQ(xdmaH2cStFifo_ENQ),
							 .DEQ(xdmaH2cStFifo_DEQ),
							 .CLR(xdmaH2cStFifo_CLR),
							 .D_OUT(xdmaH2cStFifo_D_OUT),
							 .FULL_N(xdmaH2cStFifo_FULL_N),
							 .EMPTY_N(xdmaH2cStFifo_EMPTY_N));

  // rule RL_forwardH2cDesc
  assign WILL_FIRE_RL_forwardH2cDesc =
	     !xdmaChannel_h2cDescByp_ready || !dmaReadReqQ_EMPTY_N ||
	     readReqProcessingQ_FULL_N ;

  // rule RL_forwardC2hDescAndData
  assign WILL_FIRE_RL_forwardC2hDescAndData =
	     !xdmaChannel_c2hDescByp_ready ||
	     dmaWriteReqQ_EMPTY_N && xdmaC2hStFifo_FULL_N &&
	     (!dmaWriteReqQ_D_OUT[1] || writeReqProcessingQ_FULL_N) ;

  // inlined wires
  assign rawH2cSt_rawBus_dataW_wget =
	     { xdmaChannel_rawH2cAxiStream_tdata,
	       xdmaChannel_rawH2cAxiStream_tkeep,
	       xdmaChannel_rawH2cAxiStream_tlast } ;

  // register h2cNextBeatIsFirst
  assign h2cNextBeatIsFirst_D_IN = xdmaH2cStFifo_D_OUT[0] ;
  assign h2cNextBeatIsFirst_EN =
	     xdmaH2cStFifo_EMPTY_N && dmaReadRespQ_FULL_N &&
	     readReqProcessingQ_EMPTY_N ;

  // register rawC2hSt_rawBus_isReset_isInReset
  assign rawC2hSt_rawBus_isReset_isInReset_D_IN = 1'd0 ;
  assign rawC2hSt_rawBus_isReset_isInReset_EN =
	     rawC2hSt_rawBus_isReset_isInReset ;

  // register rawH2cSt_rawBus_isReset_isInReset
  assign rawH2cSt_rawBus_isReset_isInReset_D_IN = 1'd0 ;
  assign rawH2cSt_rawBus_isReset_isInReset_EN =
	     rawH2cSt_rawBus_isReset_isInReset ;

  // submodule dmaReadReqQ
  assign dmaReadReqQ_D_IN = dmaReadSrv_request_put ;
  assign dmaReadReqQ_ENQ = EN_dmaReadSrv_request_put ;
  assign dmaReadReqQ_DEQ =
	     WILL_FIRE_RL_forwardH2cDesc && xdmaChannel_h2cDescByp_ready &&
	     dmaReadReqQ_EMPTY_N ;
  assign dmaReadReqQ_CLR = 1'b0 ;

  // submodule dmaReadRespQ
  assign dmaReadRespQ_D_IN =
	     { readReqProcessingQ_D_OUT[168:141],
	       readReqProcessingQ_D_OUT[63:0],
	       1'd0,
	       xdmaH2cStFifo_D_OUT[288:1],
	       h2cNextBeatIsFirst,
	       xdmaH2cStFifo_D_OUT[0] } ;
  assign dmaReadRespQ_ENQ =
	     xdmaH2cStFifo_EMPTY_N && dmaReadRespQ_FULL_N &&
	     readReqProcessingQ_EMPTY_N ;
  assign dmaReadRespQ_DEQ = EN_dmaReadSrv_response_get ;
  assign dmaReadRespQ_CLR = 1'b0 ;

  // submodule dmaWriteReqQ
  assign dmaWriteReqQ_D_IN = dmaWriteSrv_request_put ;
  assign dmaWriteReqQ_ENQ = EN_dmaWriteSrv_request_put ;
  assign dmaWriteReqQ_DEQ =
	     WILL_FIRE_RL_forwardC2hDescAndData &&
	     xdmaChannel_c2hDescByp_ready ;
  assign dmaWriteReqQ_CLR = 1'b0 ;

  // submodule dmaWriteRespQ
  assign dmaWriteRespQ_D_IN =
	     { writeReqProcessingQ_D_OUT[418:391],
	       writeReqProcessingQ_D_OUT[313:290],
	       1'd0 } ;
  assign dmaWriteRespQ_ENQ =
	     writeReqProcessingQ_EMPTY_N && dmaWriteRespQ_FULL_N ;
  assign dmaWriteRespQ_DEQ = EN_dmaWriteSrv_response_get ;
  assign dmaWriteRespQ_CLR = 1'b0 ;

  // submodule readReqProcessingQ
  assign readReqProcessingQ_D_IN = dmaReadReqQ_D_OUT ;
  assign readReqProcessingQ_ENQ =
	     WILL_FIRE_RL_forwardH2cDesc && xdmaChannel_h2cDescByp_ready &&
	     dmaReadReqQ_EMPTY_N ;
  assign readReqProcessingQ_DEQ =
	     xdmaH2cStFifo_EMPTY_N && dmaReadRespQ_FULL_N &&
	     readReqProcessingQ_EMPTY_N &&
	     xdmaH2cStFifo_D_OUT[0] ;
  assign readReqProcessingQ_CLR = 1'b0 ;

  // submodule writeReqProcessingQ
  assign writeReqProcessingQ_D_IN = dmaWriteReqQ_D_OUT ;
  assign writeReqProcessingQ_ENQ =
	     WILL_FIRE_RL_forwardC2hDescAndData &&
	     xdmaChannel_c2hDescByp_ready &&
	     dmaWriteReqQ_D_OUT[1] ;
  assign writeReqProcessingQ_DEQ =
	     writeReqProcessingQ_EMPTY_N && dmaWriteRespQ_FULL_N ;
  assign writeReqProcessingQ_CLR = 1'b0 ;

  // submodule xdmaC2hStFifo
  assign xdmaC2hStFifo_D_IN =
	     { dmaWriteReqQ_D_OUT[289:2], dmaWriteReqQ_D_OUT[0] } ;
  assign xdmaC2hStFifo_ENQ =
	     WILL_FIRE_RL_forwardC2hDescAndData &&
	     xdmaChannel_c2hDescByp_ready ;
  assign xdmaC2hStFifo_DEQ =
	     xdmaC2hStFifo_EMPTY_N && !rawC2hSt_rawBus_isReset_isInReset &&
	     xdmaChannel_rawC2hAxiStream_tready ;
  assign xdmaC2hStFifo_CLR = 1'b0 ;

  // submodule xdmaH2cStFifo
  assign xdmaH2cStFifo_D_IN = rawH2cSt_rawBus_dataW_wget ;
  assign xdmaH2cStFifo_ENQ =
	     xdmaH2cStFifo_FULL_N && !rawH2cSt_rawBus_isReset_isInReset &&
	     xdmaChannel_rawH2cAxiStream_tvalid ;
  assign xdmaH2cStFifo_DEQ =
	     xdmaH2cStFifo_EMPTY_N && dmaReadRespQ_FULL_N &&
	     readReqProcessingQ_EMPTY_N ;
  assign xdmaH2cStFifo_CLR = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        h2cNextBeatIsFirst <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (h2cNextBeatIsFirst_EN)
	  h2cNextBeatIsFirst <= `BSV_ASSIGNMENT_DELAY h2cNextBeatIsFirst_D_IN;
      end
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      rawC2hSt_rawBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      rawH2cSt_rawBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (rawC2hSt_rawBus_isReset_isInReset_EN)
	rawC2hSt_rawBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    rawC2hSt_rawBus_isReset_isInReset_D_IN;
      if (rawH2cSt_rawBus_isReset_isInReset_EN)
	rawH2cSt_rawBus_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    rawH2cSt_rawBus_isReset_isInReset_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    h2cNextBeatIsFirst = 1'h0;
    rawC2hSt_rawBus_isReset_isInReset = 1'h0;
    rawH2cSt_rawBus_isReset_isInReset = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_forwardC2hDescAndData && !xdmaChannel_c2hDescByp_ready)
	$display("This rule should not be fired when c2hDescBypRdyWire is False\n");
  end
  // synopsys translate_on
endmodule  // mkXdmaWrapper

